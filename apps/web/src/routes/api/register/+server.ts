import { json } from '@sveltejs/kit';
import type { JSONSchemaType } from 'ajv';
import Ajv from 'ajv';
import { PrismaClient } from '@prisma/client';
import * as argon2 from 'argon2';
import validator from 'validator';
import { v4 as uuidv4 } from 'uuid';

const ajv = new Ajv();
const prisma = new PrismaClient();

interface Data {
  username: string;
  password: string;
  email: string;
  handle: string;
  code: string;
}

const schema: JSONSchemaType<Data> = {
  type: 'object',
  properties: {
    email: { type: 'string' },
    password: { type: 'string' },
    username: { type: 'string' },
    handle: { type: 'string' },
    code: { type: 'string' }
  },
  required: ['username', 'password', 'email', 'handle', 'code'],
  additionalProperties: true
};

const validate = ajv.compile(schema);

export async function POST(params: any) {
  const data = await params.request.json();
  if (!validate(data)) {
    return await json(validate.errors);
  } else if (!validator.isEmail(data.email)) {
    return await json('Please send a valid email');
  } else if (data.code !== process.env.PASSWORD) {
    return await json('Invalid password');
  }
  const hashedPassword = await argon2.hash(data.password).catch(async () => {
    return await json('There was an error');
  });
  const id = uuidv4();
  let user = await prisma.user.findUnique({
    where: {
      user_id: id
    }
  });
  if (user) {
    return await json('Please try again');
  }

  user = await prisma.user.findUnique({
    where: {
      email: data.email
    }
  });

  if (user) {
    return await json('Email already in use.');
  }

  user = await prisma.user.findUnique({
    where: {
      handle: data.handle
    }
  });

  if (user) {
    return await json('Handle is already in use');
  }
  await prisma.user.create({
    data: {
      email: data.email,
      username: data.username,
      password: String(hashedPassword),
      user_id: id,
      handle: data.handle,
      Posts: {},
      Comments: {}
    }
  });
  return await json({
    id: id
  });
}
