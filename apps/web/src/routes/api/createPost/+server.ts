import { PrismaClient } from '@prisma/client';
import { json } from '@sveltejs/kit';
import type { JSONSchemaType } from 'ajv';
import Ajv from 'ajv';
import jwt from 'jsonwebtoken';
import { v4 as uuidv4 } from 'uuid';

const ajv = new Ajv();
const prisma = new PrismaClient();

interface Data {
  token: string;
  title: string;
  content: string;
}

const schema: JSONSchemaType<Data> = {
  type: 'object',
  properties: {
    title: { type: 'string' },
    content: { type: 'string' },
    token: { type: 'string' }
  },
  required: ['title', 'content', 'token']
};

const validate = ajv.compile(schema);

export async function POST(params: any) {
  const data = await params.request.json();
  if (!validate(data)) {
    return await json(validate.errors);
  }
  let tokenIsValid = false;
  try {
    // @ts-ignore
    tokenIsValid = await jwt.verify(data.token, process.env.JWT_KEY);
  } catch (error) {
    return await json('Invalid token');
  }
  if (tokenIsValid) {
    const id = String(uuidv4());
    await prisma.post.create({
      // @ts-ignore
      data: {
        post_id: String((await prisma.post.count()) + 1),
        title: data.title,
        body: data.content,
        Comments: {},
        user: {
          connect: {
            // @ts-ignore
            id: jwt.decode(data.token).id
          }
        }
      }
    });
    return await json({
      id: id
    });
  }
}
