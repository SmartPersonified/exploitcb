import { PrismaClient } from "@prisma/client";
import { json } from "@sveltejs/kit"
import Ajv, { type JSONSchemaType } from "ajv";
import argon2 from "argon2";
import jwt from "jsonwebtoken"

const ajv = new Ajv()
const prisma = new PrismaClient()

interface Data {
    password: string;
    handle: string;
    code: string;
}

const schema: JSONSchemaType<Data> = {
    type: 'object',
    properties: {
        password: { type: 'string' },
        handle: { type: 'string' },
        code: { type: 'string' }
    },
    required: ['handle', 'code', 'password'],
    additionalProperties: false
};

const validate = ajv.compile(schema)

export async function POST(params: any) {
    const data: Data = await params.request.json()
    if (!validate(data)) {
        return await json(validate.errors)
    }
    const user = await prisma.user.findUnique({
        where: {
            handle: data.handle,
        },
        select: {
            password: true,
            user_id: true,
        }
    })
    if (!user) {
        return await json("Invalid user")
    }
    try {
        if (await argon2.verify(user.password, data.password)) {
            // @ts-ignore
            const token = await jwt.sign({ id: user.user_id }, process.env.JWT_KEY)
            return await json({
                token: token
            })
        } else {
            return await json("Invalid password")
        }
    } catch {
        return await json("There was an error")
    }
}